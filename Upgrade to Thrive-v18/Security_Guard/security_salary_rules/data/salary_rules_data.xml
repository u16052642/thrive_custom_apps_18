<thrive>
    <data noupdate="1">
        <record id="rule_category_bounds" model="hr.salary.rule.category">
            <field name="name">Bonus</field>
            <field name="code">BONUS</field>
        </record>

        <record model="hr.payroll.structure" id="security_payroll_struct">
            <field name="name">Security Officer - Grade C Payslip</field>
            <field name="type_id" ref="hr_contract.structure_type_employee"/>
            <field name="use_worked_day_lines" eval="True"/>
            <field name="report_id" ref="hr_payroll.action_report_payslip"/>
            <field name="payslip_name">Security Officer - Grade C</field>
            <field name="hide_basic_on_pdf" eval="False"/>
            <field name="rule_ids" eval="[
                (0, 0, {
                    'name': 'Basic Salary',
                    'category_id': ref('hr_payroll.BASIC'),
                    'code': 'BASIC',
                    'sequence': 1,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'none',
                    'amount_select': 'fix',
                    'quantity': 1,
                    'amount_fix': 0,
                    'partner_id': False,
                }),
                (0, 0, {
                    'name': 'DAY',
                    'category_id': ref('hr_payroll.BASIC'),
                    'code': 'DAY',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'python',
                    'condition_python': 'result = worked_days.get(\'DAY\')',
                    'quantity': 1,
                    'amount_select': 'code',
                    'amount_python_compute': 'result = worked_days[\'DAY\'].amount if worked_days.get(\'DAY\') else 0',
                }),
                (0, 0, {
                    'name': 'NIGHT',
                    'category_id': ref('hr_payroll.BASIC'),
                    'code': 'NIGHT',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'python',
                    'condition_python': 'result = worked_days.get(\'NIGHT\')',
                    'quantity': 1,
                    'amount_select': 'code',
                    'amount_python_compute': 'result = worked_days[\'NIGHT\'].amount if worked_days.get(\'NIGHT\') else 0',
                }),
                (0, 0, {
                    'name': 'SUNDAY',
                    'category_id': ref('hr_payroll.BASIC'),
                    'code': 'SUNDAY',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'python',
                    'condition_python': 'result = worked_days.get(\'SUNDAYDAY\')',
                    'quantity': 1,
                    'amount_select': 'code',
                    'amount_python_compute': 'result = worked_days[\'SUNDAYDAY\'].amount if worked_days.get(\'SUNDAYDAY\') else 0',
                }),
                (0, 0, {
                    'name': 'SUNDAY NIGHT',
                    'category_id': ref('hr_payroll.BASIC'),
                    'code': 'SUNDAYNIGHT',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'python',
                    'condition_python': 'result = worked_days.get(\'SUNDAYNIGHT\')',
                    'quantity': 1,
                    'amount_select': 'code',
                    'amount_python_compute': 'result = worked_days[\'SUNDAYNIGHT\'].amount if worked_days.get(\'SUNDAYNIGHT\') else 0',
                }),
                (0, 0, {
                    'name': 'OVERTIME DAY',
                    'category_id': ref('hr_payroll.BASIC'),
                    'code': 'OVERTIMEDAY',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'python',
                    'condition_python': 'result = worked_days.get(\'OVERTIMEDAY\')',
                    'quantity': 1,
                    'amount_select': 'code',
                    'amount_python_compute': 'result = worked_days[\'OVERTIMEDAY\'].amount if worked_days.get(\'OVERTIMEDAY\') else 0',
                }),
                (0, 0, {
                    'name': 'OVERTIME NIGHT',
                    'category_id': ref('hr_payroll.BASIC'),
                    'code': 'OVERTIMENIGHT',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'python',
                    'condition_python': 'result = worked_days.get(\'OVERTIMENIGHT\')',
                    'quantity': 1,
                    'amount_select': 'code',
                    'amount_python_compute': 'result = worked_days[\'OVERTIMENIGHT\'].amount if worked_days.get(\'OVERTIMENIGHT\') else 0',
                }),
                (0, 0, {
                    'name': 'PUBLIC HOLIDAY',
                    'category_id': ref('hr_payroll.BASIC'),
                    'code': 'PUBLICDAY',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'python',
                    'condition_python': 'result = worked_days.get(\'PUBLICDAY\')',
                    'quantity': 1,
                    'amount_select': 'code',
                    'amount_python_compute': 'result = worked_days[\'PUBLICDAY\'].amount if worked_days.get(\'PUBLICDAY\') else 0',
                }),
                (0, 0, {
                    'name': 'PUBLIC HOLIDAY NIGHT',
                    'category_id': ref('hr_payroll.BASIC'),
                    'code': 'PUBLICNIGHT',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'python',
                    'condition_python': 'result = worked_days.get(\'PUBLICNIGHT\')',
                    'quantity': 1,
                    'amount_select': 'code',
                    'amount_python_compute': 'result = worked_days[\'PUBLICNIGHT\'].amount if worked_days.get(\'PUBLICNIGHT\') else 0',
                }),
                (0, 0, {
                    'name': 'EMPLOYEE TAX',
                    'category_id': ref('hr_payroll.DED'),
                    'code': 'EMPLOYEE_TAX',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': True,
                    'appears_on_payroll_report': True,
                    'condition_select': 'none',
                    'amount_select': 'code',
                    'amount_python_compute': '
# Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable \'result\'

result = -(categories[\'BASIC\'] + categories[\'ALW\']) * 0.15',

                }),
                (0, 0, {
                    'name': 'CLEANING ALLOWANCE',
                    'category_id': ref('hr_payroll.ALW'),
                    'code': 'CLEANING_ALLOWANCE',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': True,
                    'appears_on_payroll_report': True,
                    'condition_select': 'none',
                    'amount_select': 'fix',
                    'quantity': 1,
                    'amount_fix': 450,

                }),
                (0, 0, {
                    'name': 'OVERTIME',
                    'category_id': ref('hr_payroll.ALW'),
                    'code': 'OVERTIME',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'python',
                    'condition_python': 'result = worked_days.get(\'OVERTIME\')',
                    'amount_select': 'code',
                    'amount_python_compute': 'result = worked_days[\'OVERTIME\'].amount if worked_days.get(\'OVERTIME\') else 0',
                }),
                (0, 0, {
                    'name': 'ANNUAL BONUS',
                    'category_id': ref('security_salary_rules.rule_category_bounds'),
                    'code': 'ANNUAL_BONUS',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'none',
                    'amount_select': 'code',
                    'amount_python_compute': '

# Available variables:
#----------------------
# payslip: hr.payslip object
# employee: hr.employee object
# contract: hr.contract object
# rules: dict containing the rules code (previously computed)
# categories: dict containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: dict containing the computed worked days
# inputs: dict containing the computed inputs.

# Note: returned value have to be set in the variable \'result\'

result = (contract.x_studio_3699_gross_remuneration_total_gross_for_12_months * 0.06) / 12
                    ',
                }),
                (0, 0, {
                    'name': 'Nightshift Allowance',
                    'category_id': ref('hr_payroll.ALW'),
                    'code': 'Nightshift_Allowance',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': True,
                    'appears_on_payroll_report': True,
                    'condition_select': 'python',
                    'condition_python': 'result = worked_days.get(\'NIGHT\')',
                    'quantity': 1,
                    'amount_select': 'code',
                    'amount_python_compute': 'result = worked_days[\'NIGHT\'].amount if worked_days.get(\'NIGHT\') else 0',
                }),
                (0, 0, {
                    'name': 'Provident Fund',
                    'category_id': ref('hr_payroll.COMP'),
                    'code': 'Provident_Fund',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': True,
                    'appears_on_payroll_report': True,
                    'condition_select': 'none',
                    'quantity': 1,
                    'amount_select': 'fix',
                    'amount_fix': 274.95,
                }),
                (0, 0, {
                    'name': 'MEDICAL AID',
                    'category_id': ref('hr_payroll.COMP'),
                    'code': 'MEDICAL_AID_Comp_Contribution',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': True,
                    'appears_on_payroll_report': True,
                    'condition_select': 'none',
                    'quantity': 1,
                    'amount_select': 'fix',
                    'amount_fix': 122.50,
                }),
                (0, 0, {
                    'name': 'MEDICAL AID',
                    'category_id': ref('hr_payroll.DED'),
                    'code': 'MEDICAL_AID_Deduction',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': True,
                    'appears_on_payroll_report': True,
                    'condition_select': 'none',
                    'quantity': 1,
                    'amount_select': 'fix',
                    'amount_fix': -172.50,
                }),
                (0, 0, {
                    'name': 'PSIRA',
                    'category_id': ref('hr_payroll.DED'),
                    'code': 'PSIRA',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': True,
                    'appears_on_payroll_report': True,
                    'condition_select': 'none',
                    'quantity': 1,
                    'amount_select': 'fix',
                    'amount_fix': -3.80,
                }),
                (0, 0, {
                    'name': 'Provident Fund PSSPF',
                    'category_id': ref('hr_payroll.DED'),
                    'code': 'Provident_Fund_PSSPF',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': True,
                    'appears_on_payroll_report': True,
                    'condition_select': 'none',
                    'quantity': 1,
                    'amount_select': 'fix',
                    'amount_fix': -274.95,
                }),
                (0, 0, {
                    'name': 'National Bargaining Coun Levy',
                    'category_id': ref('hr_payroll.DED'),
                    'code': 'National_Bargaining_Levy',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': True,
                    'appears_on_payroll_report': True,
                    'condition_select': 'none',
                    'quantity': 1,
                    'amount_select': 'fix',
                    'amount_fix': -7.00,
                }),
                (0, 0, {
                    'name': 'UIF',
                    'category_id': ref('hr_payroll.DED'),
                    'code': 'UIF',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': True,
                    'appears_on_payroll_report': True,
                    'condition_select': 'none',
                    'amount_select': 'code',
                    'amount_python_compute': 'result = -(categories[\'BASIC\'] + categories[\'ALW\']) * 0.10',
                }),
                (0, 0, {
                    'name': 'CLEANING ALLOWANCE',
                    'category_id': ref('hr_payroll.BASIC'),
                    'code': 'CLEANING_ALLOWANCE_BASIC',
                    'sequence': 5,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': True,
                    'appears_on_payroll_report': True,
                    'condition_select': 'none',
                    'amount_select': 'fix',
                    'quantity': 1,
                    'amount_fix': '45.00',
                }),
                (0, 0, {
                    'name': 'Gross',
                    'category_id': ref('hr_payroll.GROSS'),
                    'code': 'GROSS',
                    'sequence': 100,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': True,
                    'appears_on_payroll_report': True,
                    'condition_select': 'none',
                    'amount_select': 'code',
                    'amount_python_compute': 'result = categories[\'BASIC\'] + categories[\'BONUS\']',
                }),
                (0, 0, {
                    'name': 'Attachment of Salary',
                    'category_id': ref('hr_payroll.DED'),
                    'code': 'ATTACH_SALARY',
                    'sequence': 174,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'python',
                    'condition_python': 'result = \'ATTACH_SALARY\' in inputs',
                    'quantity': 1,
                    'amount_select': 'code',
                    'amount_python_compute': '
result = -inputs[\'ATTACH_SALARY\'].amount
result_name = inputs[\'ATTACH_SALARY\'].name',
                }),
                (0, 0, {
                    'name': 'Assignment of Salary',
                    'category_id': ref('hr_payroll.DED'),
                    'code': 'ASSIG_SALARY',
                    'sequence': 174,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'python',
                    'condition_python': 'result = \'ASSIG_SALARY\' in inputs',
                    'quantity': 1,
                    'amount_select': 'code',
                    'amount_python_compute': '
result = -inputs[\'ASSIG_SALARY\'].amount
result_name = inputs[\'ASSIG_SALARY\'].name',
                }),
                (0, 0, {
                    'name': 'Child Support',
                    'category_id': ref('hr_payroll.DED'),
                    'code': 'CHILD_SUPPORT',
                    'sequence': 174,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'python',
                    'condition_python': 'result = \'CHILD_SUPPORT\' in inputs',
                    'quantity': 1,
                    'amount_select': 'code',
                    'amount_python_compute': '
result = -inputs[\'CHILD_SUPPORT\'].amount
result_name = inputs[\'CHILD_SUPPORT\'].name',
                }),
                (0, 0, {
                    'name': 'Deduction',
                    'category_id': ref('hr_payroll.DED'),
                    'code': 'DEDUCTION',
                    'sequence': 198,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'python',
                    'condition_python': 'result = \'DEDUCTION\' in inputs',
                    'quantity': 1,
                    'amount_select': 'code',
                    'amount_python_compute': '
result = -inputs[\'DEDUCTION\'].amount
result_name = inputs[\'DEDUCTION\'].name',
                }),
                (0, 0, {
                    'name': 'Reimbursement',
                    'category_id': ref('hr_payroll.DED'),
                    'code': 'REIMBURSEMENT',
                    'sequence': 199,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': False,
                    'appears_on_payroll_report': False,
                    'condition_select': 'python',
                    'condition_python': 'result = \'REIMBURSEMENT\' in inputs',
                    'quantity': 1,
                    'amount_select': 'code',
                    'amount_python_compute': '
result = -inputs[\'REIMBURSEMENT\'].amount
result_name = inputs[\'REIMBURSEMENT\'].name',
                }),
                (0, 0, {
                    'name': 'Net Salary',
                    'category_id': ref('hr_payroll.NET'),
                    'code': 'NET',
                    'sequence': 200,
                    'active': True,
                    'appears_on_payslip': True,
                    'appears_on_employee_cost_dashboard': True,
                    'appears_on_payroll_report': False,
                    'condition_select': 'none',
                    'amount_select': 'code',
                    'amount_python_compute': 'result = categories[\'BASIC\'] + categories[\'DED\'] + categories[\'BONUS\']',
                }),
            ]"/>
            <field name="unpaid_work_entry_type_ids" eval="[
                ref('hr_work_entry_contract.work_entry_type_unpaid_leave')
            ]"/>
        </record>
    </data>    
</thrive>
